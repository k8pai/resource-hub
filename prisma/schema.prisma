// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  resources      Resource[]
  savedResources SavedResource[]
  likedResources LikedResource[]
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Resource {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  website     String?
  docs        String?
  createdAt   DateTime        @default(now())
  createdBy   User            @relation(fields: [createdById], references: [id])
  createdById String          @db.ObjectId
  likeCount   Int
  savedBy     SavedResource[]
  likedBy     LikedResource[]
  tags        Tag[]           @relation(fields: [tagIds], references: [id])
  tagIds      String[]        @db.ObjectId
}

model Tag {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  resources   Resource[] @relation(fields: [resourceIds], references: [id])
  resourceIds String[]   @db.ObjectId
}

model SavedResource {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String   @db.ObjectId
}

model LikedResource {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  resource   Resource @relation(fields: [resourceId], references: [id])
  resourceId String   @db.ObjectId
}
